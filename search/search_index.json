{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bark monitor","text":"<p>Showing my neighbor my dog doesn't bark!</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Do you also have neighbor who accuses your dog of barking all the time, want to kick you out of your flat because of it, even though you know it's not true? Do you want to know if your dog is actually noisy when you are gone but you don't (and don't want to buy) a baby cam?</p> <p>Then this project is for you!</p> <p>The bark monitor will:</p> <ul> <li>Record your dog while you are gone.   The recordings are saved in a folder to enable you to really show that neighbor they are full of shit.</li> <li>Monitor its barking real time and send you notification through a Telegram bot when your neighbor drives the dog crazy and they barks.   Detection of the bark can be done using the Yamnet neural network implemented in tensorflow, or the amplitude of the signal.   Using Yamnet, cats are also tracked ;).</li> </ul> <p>Install the bark monitor and start recording your dog today :).</p>"},{"location":"google_sync/","title":"Sync with google drive","text":"<p>It is possible to save the recordings to google drive automatically although the feature is very experimental.</p> <p>When used, the config file of dog activities and recording time will be safe and \"sync\" with your google drive as a json.</p> <p>On the other hand, audio recordings also will be saved but the code will erase current audio saved on the drive! There is \"merging\" ability to save the audio since they are simply uploaded as a zip folder. Contribution to make this system better are welcomed but it works for me so I won't change it myself :).</p>"},{"location":"google_sync/#set-up-credentials","title":"Set up credentials","text":"<p>To enable the bark_monitor to save to your google drive, follow this tutorial to enable the Google API and configure the OAuth consent screen of your app. At the end of the process you should get a <code>credentials.json</code>. Add the path to the credentials file in the config for the key:</p> <pre><code>\"google credentials\": \"clients_secrets.json\"\n</code></pre> <p>You can now send <code>/login</code> to the bot to connect to your google drive account and enable automatic saves.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#snap","title":"Snap","text":"<p>When using the snape make sure to plug all the connection or the microphone won't be found. List all connections with:</p> <pre><code>snap connections bark-monitor\n</code></pre> <p>connect them with:</p> <pre><code>sudo snap connect bark-monitor:XXX\n</code></pre> <p>This should connect them all:</p> <pre><code>sudo snap connect bark-monitor:alsa\nsudo snap connect bark-monitor:pulseaudio\nsudo snap connect bark-monitor:audio-record\n</code></pre>"},{"location":"install/#pypi","title":"Pypi","text":"<p>Get from pypi with <code>pip install bark-monitor</code>.</p>"},{"location":"install/#manual-install","title":"Manual install","text":"<p>The bark monitor relies on pyaudio and portaudio. Start by installing gcc/g++ and portaudio. On Ubuntu:</p> <pre><code>sudo apt install build-essential\nsudo apt-get install portaudio19-dev\n</code></pre> <p>Install using UV on python 3.12. Run in the root folder:</p> <pre><code>uv sync\n</code></pre>"},{"location":"raspberrypi/","title":"Raspberry pi","text":"<p>The bark monitor was tested on Raspberry pi 4, running Ubuntu 24.05 and python 3.12. I used a 2G raspberry pi but needed to add 2Gb swap file to use the Yamnet model (might be unecessary for the lite model).</p>"},{"location":"raspberrypi/#set-up-microphone","title":"Set up microphone","text":"<p>Since the raspberry pi 4 has no microphone, I have used Adafruit mini USB microphone.</p> <p>Make sure you are part of the audio group.</p> <p><code>usermod -aG audio &lt;user&gt;</code></p> <p>If you are not part of the group you might have this weird error where you cannot access audio device when not logged in the locally on the machine.</p> <p>E.g. connected as ssh, <code>aplay -l</code> return  <code>aplay: device_list:268: no soundcards found...</code>, but, if you are logged in locally on the machine, then <code>apply -l</code> from the ssh terminal returns:</p> <pre><code>**** *List of PLAYBACK Hardware Devices* ****\ncard 0: Intel [HDA Intel], device 0: ALC662 rev1 Analog [ALC662 rev1 Analog]\n  Subdevices: 1/1\n  Subdevice #0: subdevice #0\ncard 1: HDMI [HDA ATI HDMI], device 3: HDMI 0 [HDMI 0]\n  Subdevices: 1/1\n  Subdevice #0: subdevice #0\n</code></pre>"},{"location":"record/","title":"Record your dog","text":"<p>Once you have installed the program and created a telegram bot, you can start recording and monitor your dog.</p>"},{"location":"record/#set-up-the-configuration-file","title":"Set up the configuration file","text":"<p>The bark monitor will read the configuration from a json file. By default, it will read the file <code>config.json</code> but use the option <code>config-file</code> to point to any path.</p> <p>The config file should look like this at minimum:</p> <pre><code>{\n  \"api_key\": \"you api key to the telegram bot\",\n  \"output_folder\": \"where to save the recordings\",\n  \"config_folder\": \"where to save the telegram bot configuration\"\n}\n\n</code></pre> <p>More options are available in the recorder's programs found in <code>bark_monitor/cli</code>.</p>"},{"location":"record/#register-users","title":"Register users","text":"<p>If it is your first time launching the bark monitor, the first step is to register your user. Users can only be registered if the monitor is launched in register mode: <code>bark-monitor --accept-new-users</code>. Once the monitor is launched, open your telegram bot, and send <code>/register</code>. You should now be register to this machine, and able receive notifications and control it.</p>"},{"location":"record/#launch-the-recordings","title":"Launch the recordings","text":"<p>Launching the bark monitor is as simple as entering <code>bark-monitor --config-file &lt;path to config file&gt;</code>. If the set-up is correct you should receive a notification when the monitor is ready the record. To start a recording send <code>/start</code> to the bot. To stop it send <code>/stop</code>. See the telegram bot documentation for more details on what the bot can do.</p> <p>If you are on Raspberry Pi or other device, consider using the TFlite version of Yamnet by using <code>bark-monitor-lite --config-file &lt;path to config file&gt;</code> instead.</p>"},{"location":"telegram_bot/","title":"Telegram bot","text":""},{"location":"telegram_bot/#create","title":"Create","text":"<p>create a Telegram bot and obtain the api key to input in the config file.</p>"},{"location":"telegram_bot/#use","title":"Use","text":"<p>To see all commands available to the bot, send <code>\\help</code> to your bot.</p> <p>Example of commands available to the bot are:</p> <ul> <li><code>\\register</code>: register to receive updates from the bot.</li> <li><code>\\start</code>: start the recorder</li> <li><code>\\stop</code>: stop the recorder</li> <li><code>\\status</code>: get the current status of the recorder -&gt; is it recording and how long as the animal barked today.</li> <li><code>\\pause</code>: pause the current recording without stopping it---on/off time won't be registered in the app state.</li> <li><code>\\unpause</code>: restart a paused recorder.</li> <li><code>\\bark_level</code>: return the threshold for amplitude if using the amplitude based detection.</li> </ul> <p>See in the file <code>bark_monitor/very_bark_bot.py</code> to see the commands available to the bot.</p>"},{"location":"thingsboard/","title":"Thingsboard","text":"<p>It is possible to log the barks onto Thingsboard. First, create a device on ThingsBoard, and then simply add:</p> <pre><code>  \"thingsboard_device_token\": \"Device token\",\n  \"thingsboard_ip\": \"ip address\",\n  \"thingsboard_port\": port number,\n</code></pre> <p>with the correct value to the config file.</p> <p>You can visualize in realtime your pets behavior on a dashboard:</p> <p></p>"}]}